
Production Rules
(rule precedences determined from %prec or 1st terminal between parentheses):
1: program ->  declaration_statement_list procedure_name #0001 procedure_body
2: #0001 ->  <empty>
3: program ->  procedure_name #0002 procedure_body
4: #0002 ->  <empty>
5: procedure_name (NAME) ->  NAME '(' ')'
6: procedure_body ('{') ->  '{' declaration_statement_list #0003 basic_block_list '}'
7: #0003 ->  <empty>
8: procedure_body ('{') ->  '{' basic_block_list '}'
9: declaration_statement_list ->  declaration_statement
10: declaration_statement_list ->  declaration_statement_list declaration_statement
11: declaration_statement (INTEGER) ->  INTEGER NAME ';'
12: basic_block_list ->  basic_block_list basic_block
13: basic_block_list ->  basic_block
14: basic_block (BB) ->  BB ':' executable_statement_list
15: if_else_clause (IF) ->  IF '(' relop_expression ')' GOTO BB ';' ELSE GOTO BB
16: relop_expression ->  variable relop variable
17: relop_expression ->  constant relop variable
18: relop_expression ->  variable relop constant
19: relop_expression ->  constant relop constant
20: relop_expression ->  relop_expression relop variable
21: relop_expression ->  relop_expression relop constant
22: relop (LT) ->  LT
23: relop (LE) ->  LE
24: relop (GT) ->  GT
25: relop (GE) ->  GE
26: relop (NE) ->  NE
27: relop (EQ) ->  EQ
28: executable_statement_list ->  assignment_statement_list
29: executable_statement_list (RETURN) ->  assignment_statement_list RETURN ';'
30: executable_statement_list (GOTO) ->  assignment_statement_list GOTO BB ';'
31: executable_statement_list (';') ->  assignment_statement_list if_else_clause ';'
32: assignment_statement_list ->  <empty>
33: assignment_statement_list ->  assignment_statement_list assignment_statement
34: assignment_statement (ASSIGN_OP) ->  variable ASSIGN_OP variable ';'
35: assignment_statement (ASSIGN_OP) ->  variable ASSIGN_OP constant ';'
36: assignment_statement (ASSIGN_OP) ->  variable ASSIGN_OP relop_expression ';'
37: variable (NAME) ->  NAME
38: constant (INTEGER_NUMBER) ->  INTEGER_NUMBER
39: program_$ ->  program


Symbolic Terminal tokens:
       error
       EOF
   257: INTEGER_NUMBER
   258: BB
   259: NAME
   260: RETURN
   261: INTEGER
   262: IF
   263: ELSE
   264: GOTO
   265: ASSIGN_OP
   266: LT
   267: LE
   268: EQ
   269: NE
   270: GT
   271: GE
    40: '('
    41: ')'
   123: '{'
   125: '}'
    59: ';'
    58: ':'


Grammar States: 
State 0:
39: program_$ ->  . program 
  0:   On program to state 1
  1:   On declaration_statement_list to state 2
  2:   On procedure_name to state 3
  3:   On declaration_statement to state 4
  4:   On NAME to state 5
  5:   On INTEGER to state 6


State 1:
39: program_$ -> program  . 


State 2:
1: program -> declaration_statement_list  . procedure_name #0001 procedure_body 
10: declaration_statement_list -> declaration_statement_list  . declaration_statement 
  0:   On procedure_name to state 7
  1:   On declaration_statement to state 8
  2:   On NAME to state 5
  3:   On INTEGER to state 6


State 3:
3: program -> procedure_name  . #0002 procedure_body 
  0:   On #0002 to state 9
  Reduce by 4: #0002 ->  . 


State 4:
9: declaration_statement_list -> declaration_statement  . 
  Reduce by 9: declaration_statement_list -> declaration_statement  . 


State 5:
5: procedure_name -> NAME  . '(' ')' 
  0:   On '(' to state 10


State 6:
11: declaration_statement -> INTEGER  . NAME ';' 
  0:   On NAME to state 11


State 7:
1: program -> declaration_statement_list procedure_name  . #0001 procedure_body 
  0:   On #0001 to state 12
  Reduce by 2: #0001 ->  . 


State 8:
10: declaration_statement_list -> declaration_statement_list declaration_statement  . 
  Reduce by 10: declaration_statement_list -> declaration_statement_list declaration_statement  . 


State 9:
3: program -> procedure_name #0002  . procedure_body 
  0:   On procedure_body to state 13
  1:   On '{' to state 14


State 10:
5: procedure_name -> NAME '('  . ')' 
  0:   On ')' to state 15


State 11:
11: declaration_statement -> INTEGER NAME  . ';' 
  0:   On ';' to state 16


State 12:
1: program -> declaration_statement_list procedure_name #0001  . procedure_body 
  0:   On procedure_body to state 17
  1:   On '{' to state 14


State 13:
3: program -> procedure_name #0002 procedure_body  . 
  Reduce by 3: program -> procedure_name #0002 procedure_body  . 


State 14:
6: procedure_body -> '{'  . declaration_statement_list #0003 basic_block_list '}' 
8: procedure_body -> '{'  . basic_block_list '}' 
  0:   On declaration_statement_list to state 18
  1:   On basic_block_list to state 19
  2:   On declaration_statement to state 4
  3:   On basic_block to state 20
  4:   On INTEGER to state 6
  5:   On BB to state 21


State 15:
5: procedure_name -> NAME '(' ')'  . 
  Reduce by 5: procedure_name -> NAME '(' ')'  . 


State 16:
11: declaration_statement -> INTEGER NAME ';'  . 
  Reduce by 11: declaration_statement -> INTEGER NAME ';'  . 


State 17:
1: program -> declaration_statement_list procedure_name #0001 procedure_body  . 
  Reduce by 1: program -> declaration_statement_list procedure_name #0001 procedure_body  . 


State 18:
6: procedure_body -> '{' declaration_statement_list  . #0003 basic_block_list '}' 
10: declaration_statement_list -> declaration_statement_list  . declaration_statement 
  0:   On #0003 to state 22
  1:   On declaration_statement to state 8
  2:   On INTEGER to state 6
  Reduce by 7: #0003 ->  . 


State 19:
8: procedure_body -> '{' basic_block_list  . '}' 
12: basic_block_list -> basic_block_list  . basic_block 
  0:   On '}' to state 23
  1:   On basic_block to state 24
  2:   On BB to state 21


State 20:
13: basic_block_list -> basic_block  . 
  Reduce by 13: basic_block_list -> basic_block  . 


State 21:
14: basic_block -> BB  . ':' executable_statement_list 
  0:   On ':' to state 25


State 22:
6: procedure_body -> '{' declaration_statement_list #0003  . basic_block_list '}' 
  0:   On basic_block_list to state 26
  1:   On basic_block to state 20
  2:   On BB to state 21


State 23:
8: procedure_body -> '{' basic_block_list '}'  . 
  Reduce by 8: procedure_body -> '{' basic_block_list '}'  . 


State 24:
12: basic_block_list -> basic_block_list basic_block  . 
  Reduce by 12: basic_block_list -> basic_block_list basic_block  . 


State 25:
14: basic_block -> BB ':'  . executable_statement_list 
  0:   On executable_statement_list to state 27
  1:   On assignment_statement_list to state 28
  Reduce by 32: assignment_statement_list ->  . 


State 26:
6: procedure_body -> '{' declaration_statement_list #0003 basic_block_list  . '}' 
12: basic_block_list -> basic_block_list  . basic_block 
  0:   On '}' to state 29
  1:   On basic_block to state 24
  2:   On BB to state 21


State 27:
14: basic_block -> BB ':' executable_statement_list  . 
  Reduce by 14: basic_block -> BB ':' executable_statement_list  . 


State 28:
28: executable_statement_list -> assignment_statement_list  . 
29: executable_statement_list -> assignment_statement_list  . RETURN ';' 
30: executable_statement_list -> assignment_statement_list  . GOTO BB ';' 
31: executable_statement_list -> assignment_statement_list  . if_else_clause ';' 
33: assignment_statement_list -> assignment_statement_list  . assignment_statement 
  0:   On RETURN to state 30
  1:   On GOTO to state 31
  2:   On if_else_clause to state 32
  3:   On assignment_statement to state 33
  4:   On IF to state 34
  5:   On variable to state 35
  6:   On NAME to state 36
  Reduce by 28: executable_statement_list -> assignment_statement_list  . 


State 29:
6: procedure_body -> '{' declaration_statement_list #0003 basic_block_list '}'  . 
  Reduce by 6: procedure_body -> '{' declaration_statement_list #0003 basic_block_list '}'  . 


State 30:
29: executable_statement_list -> assignment_statement_list RETURN  . ';' 
  0:   On ';' to state 37


State 31:
30: executable_statement_list -> assignment_statement_list GOTO  . BB ';' 
  0:   On BB to state 38


State 32:
31: executable_statement_list -> assignment_statement_list if_else_clause  . ';' 
  0:   On ';' to state 39


State 33:
33: assignment_statement_list -> assignment_statement_list assignment_statement  . 
  Reduce by 33: assignment_statement_list -> assignment_statement_list assignment_statement  . 


State 34:
15: if_else_clause -> IF  . '(' relop_expression ')' GOTO BB ';' ELSE GOTO BB 
  0:   On '(' to state 40


State 35:
34: assignment_statement -> variable  . ASSIGN_OP variable ';' 
35: assignment_statement -> variable  . ASSIGN_OP constant ';' 
36: assignment_statement -> variable  . ASSIGN_OP relop_expression ';' 
  0:   On ASSIGN_OP to state 41


State 36:
37: variable -> NAME  . 
  Reduce by 37: variable -> NAME  . 


State 37:
29: executable_statement_list -> assignment_statement_list RETURN ';'  . 
  Reduce by 29: executable_statement_list -> assignment_statement_list RETURN ';'  . 


State 38:
30: executable_statement_list -> assignment_statement_list GOTO BB  . ';' 
  0:   On ';' to state 42


State 39:
31: executable_statement_list -> assignment_statement_list if_else_clause ';'  . 
  Reduce by 31: executable_statement_list -> assignment_statement_list if_else_clause ';'  . 


State 40:
15: if_else_clause -> IF '('  . relop_expression ')' GOTO BB ';' ELSE GOTO BB 
  0:   On relop_expression to state 43
  1:   On variable to state 44
  2:   On constant to state 45
  3:   On NAME to state 36
  4:   On INTEGER_NUMBER to state 46


State 41:
34: assignment_statement -> variable ASSIGN_OP  . variable ';' 
35: assignment_statement -> variable ASSIGN_OP  . constant ';' 
36: assignment_statement -> variable ASSIGN_OP  . relop_expression ';' 
  0:   On variable to state 47
  1:   On constant to state 48
  2:   On relop_expression to state 49
  3:   On NAME to state 36
  4:   On INTEGER_NUMBER to state 46


State 42:
30: executable_statement_list -> assignment_statement_list GOTO BB ';'  . 
  Reduce by 30: executable_statement_list -> assignment_statement_list GOTO BB ';'  . 


State 43:
15: if_else_clause -> IF '(' relop_expression  . ')' GOTO BB ';' ELSE GOTO BB 
20: relop_expression -> relop_expression  . relop variable 
21: relop_expression -> relop_expression  . relop constant 
  0:   On ')' to state 50
  1:   On relop to state 51
  2:   On LT to state 52
  3:   On LE to state 53
  4:   On GT to state 54
  5:   On GE to state 55
  6:   On NE to state 56
  7:   On EQ to state 57


State 44:
16: relop_expression -> variable  . relop variable 
18: relop_expression -> variable  . relop constant 
  0:   On relop to state 58
  1:   On LT to state 52
  2:   On LE to state 53
  3:   On GT to state 54
  4:   On GE to state 55
  5:   On NE to state 56
  6:   On EQ to state 57


State 45:
17: relop_expression -> constant  . relop variable 
19: relop_expression -> constant  . relop constant 
  0:   On relop to state 59
  1:   On LT to state 52
  2:   On LE to state 53
  3:   On GT to state 54
  4:   On GE to state 55
  5:   On NE to state 56
  6:   On EQ to state 57


State 46:
38: constant -> INTEGER_NUMBER  . 
  Reduce by 38: constant -> INTEGER_NUMBER  . 


State 47:
34: assignment_statement -> variable ASSIGN_OP variable  . ';' 
16: relop_expression -> variable  . relop variable 
18: relop_expression -> variable  . relop constant 
  0:   On ';' to state 60
  1:   On relop to state 58
  2:   On LT to state 52
  3:   On LE to state 53
  4:   On GT to state 54
  5:   On GE to state 55
  6:   On NE to state 56
  7:   On EQ to state 57


State 48:
35: assignment_statement -> variable ASSIGN_OP constant  . ';' 
17: relop_expression -> constant  . relop variable 
19: relop_expression -> constant  . relop constant 
  0:   On ';' to state 61
  1:   On relop to state 59
  2:   On LT to state 52
  3:   On LE to state 53
  4:   On GT to state 54
  5:   On GE to state 55
  6:   On NE to state 56
  7:   On EQ to state 57


State 49:
36: assignment_statement -> variable ASSIGN_OP relop_expression  . ';' 
20: relop_expression -> relop_expression  . relop variable 
21: relop_expression -> relop_expression  . relop constant 
  0:   On ';' to state 62
  1:   On relop to state 51
  2:   On LT to state 52
  3:   On LE to state 53
  4:   On GT to state 54
  5:   On GE to state 55
  6:   On NE to state 56
  7:   On EQ to state 57


State 50:
15: if_else_clause -> IF '(' relop_expression ')'  . GOTO BB ';' ELSE GOTO BB 
  0:   On GOTO to state 63


State 51:
20: relop_expression -> relop_expression relop  . variable 
21: relop_expression -> relop_expression relop  . constant 
  0:   On variable to state 64
  1:   On constant to state 65
  2:   On NAME to state 36
  3:   On INTEGER_NUMBER to state 46


State 52:
22: relop -> LT  . 
  Reduce by 22: relop -> LT  . 


State 53:
23: relop -> LE  . 
  Reduce by 23: relop -> LE  . 


State 54:
24: relop -> GT  . 
  Reduce by 24: relop -> GT  . 


State 55:
25: relop -> GE  . 
  Reduce by 25: relop -> GE  . 


State 56:
26: relop -> NE  . 
  Reduce by 26: relop -> NE  . 


State 57:
27: relop -> EQ  . 
  Reduce by 27: relop -> EQ  . 


State 58:
16: relop_expression -> variable relop  . variable 
18: relop_expression -> variable relop  . constant 
  0:   On variable to state 66
  1:   On constant to state 67
  2:   On NAME to state 36
  3:   On INTEGER_NUMBER to state 46


State 59:
17: relop_expression -> constant relop  . variable 
19: relop_expression -> constant relop  . constant 
  0:   On variable to state 68
  1:   On constant to state 69
  2:   On NAME to state 36
  3:   On INTEGER_NUMBER to state 46


State 60:
34: assignment_statement -> variable ASSIGN_OP variable ';'  . 
  Reduce by 34: assignment_statement -> variable ASSIGN_OP variable ';'  . 


State 61:
35: assignment_statement -> variable ASSIGN_OP constant ';'  . 
  Reduce by 35: assignment_statement -> variable ASSIGN_OP constant ';'  . 


State 62:
36: assignment_statement -> variable ASSIGN_OP relop_expression ';'  . 
  Reduce by 36: assignment_statement -> variable ASSIGN_OP relop_expression ';'  . 


State 63:
15: if_else_clause -> IF '(' relop_expression ')' GOTO  . BB ';' ELSE GOTO BB 
  0:   On BB to state 70


State 64:
20: relop_expression -> relop_expression relop variable  . 
  Reduce by 20: relop_expression -> relop_expression relop variable  . 


State 65:
21: relop_expression -> relop_expression relop constant  . 
  Reduce by 21: relop_expression -> relop_expression relop constant  . 


State 66:
16: relop_expression -> variable relop variable  . 
  Reduce by 16: relop_expression -> variable relop variable  . 


State 67:
18: relop_expression -> variable relop constant  . 
  Reduce by 18: relop_expression -> variable relop constant  . 


State 68:
17: relop_expression -> constant relop variable  . 
  Reduce by 17: relop_expression -> constant relop variable  . 


State 69:
19: relop_expression -> constant relop constant  . 
  Reduce by 19: relop_expression -> constant relop constant  . 


State 70:
15: if_else_clause -> IF '(' relop_expression ')' GOTO BB  . ';' ELSE GOTO BB 
  0:   On ';' to state 71


State 71:
15: if_else_clause -> IF '(' relop_expression ')' GOTO BB ';'  . ELSE GOTO BB 
  0:   On ELSE to state 72


State 72:
15: if_else_clause -> IF '(' relop_expression ')' GOTO BB ';' ELSE  . GOTO BB 
  0:   On GOTO to state 73


State 73:
15: if_else_clause -> IF '(' relop_expression ')' GOTO BB ';' ELSE GOTO  . BB 
  0:   On BB to state 74


State 74:
15: if_else_clause -> IF '(' relop_expression ')' GOTO BB ';' ELSE GOTO BB  . 
  Reduce by 15: if_else_clause -> IF '(' relop_expression ')' GOTO BB ';' ELSE GOTO BB  . 



