  Procedure: main
  Intermediate Code Statements

label2: 
 iLoad:	v0 <- 3
 store:	a <- v0
 iLoad:	v0 <- 4
 store:	b <- v0
 iLoad:	v0 <- 5
 store:	c <- v0
 iLoad:	v0 <- 6
 store:	d <- v0
 iLoad:	v0 <- 7
 store:	e <- v0
 iLoad:	v0 <- 8
 store:	f <- v0
 load:	v0 <- c
 iLoad:	t0 <- 7
 sle: t1 <- v0 , t0
 load:	v0 <- e
 sle: t0 <- t1 , v0
 load:	v0 <- d
 seq: t1 <- t0 , v0
 load:	v0 <- f
 sne: t0 <- t1 , v0
 store:	a <- t0

	.text 			# The .text assembler directive indicates
	.globl main		# The following is the code (as oppose to data)
main:				# .globl makes main know to the 
				# outside of the program.
# Prologue begins 
	sw $fp, 0($sp)		# Save the frame pointer
	sub $fp, $sp, 4		# Update the frame pointer

	sub $sp, $sp, 24		# Make space for the locals
# Prologue ends


label2: 
	li, $v0, 3
	sw, $v0, 20($fp)
	li, $v0, 4
	sw, $v0, 16($fp)
	li, $v0, 5
	sw, $v0, 12($fp)
	li, $v0, 6
	sw, $v0, 8($fp)
	li, $v0, 7
	sw, $v0, 4($fp)
	li, $v0, 8
	sw, $v0, 0($fp)
	lw, $v0, 12($fp)
	li, $t0, 7
	sle $t1, $v0, $t0
	lw, $v0, 4($fp)
	sle $t0, $t1, $v0
	lw, $v0, 8($fp)
	seq $t1, $t0, $v0
	lw, $v0, 0($fp)
	sne $t0, $t1, $v0
	sw, $t0, 20($fp)

# Epilogue Begins
	add $sp, $sp, 24
	lw $fp, 0($sp)  
	jr        $31		# Jump back to the operating system.
# Epilogue Ends

