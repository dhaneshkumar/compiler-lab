
Production Rules
(rule precedences determined from %prec or 1st terminal between parentheses):
1: program ->  declaration_statement_list procedure_name #0001 procedure_body
2: #0001 ->  <empty>
3: program ->  procedure_name #0002 procedure_body
4: #0002 ->  <empty>
5: procedure_name (NAME) ->  NAME '(' ')'
6: procedure_body ('{') ->  '{' declaration_statement_list #0003 basic_block_list '}'
7: #0003 ->  <empty>
8: procedure_body ('{') ->  '{' basic_block_list '}'
9: declaration_statement_list ->  declaration_statement
10: declaration_statement_list ->  declaration_statement_list declaration_statement
11: declaration_statement (INTEGER) ->  INTEGER NAME ';'
12: basic_block_list ->  basic_block_list basic_block
13: basic_block_list ->  basic_block
14: basic_block ('<') ->  '<' NAME INTEGER_NUMBER '>' ':' executable_statement_list
15: if_else_clause (IF) ->  IF '(' relop_expression ')' GOTO '<' NAME INTEGER_NUMBER '>' ';' ELSE GOTO '<' NAME INTEGER_NUMBER '>'
16: relop_expression ->  variable relop variable
17: relop_expression ->  constant relop variable
18: relop_expression ->  variable relop constant
19: relop_expression ->  relop_expression relop variable
20: relop_expression ->  relop_expression relop constant
21: relop ('>') ->  '>' '='
22: relop ('<') ->  '<' '='
23: relop ('=') ->  '=' '='
24: relop ('!') ->  '!' '='
25: relop ('<') ->  '<'
26: relop ('>') ->  '>'
27: executable_statement_list ->  assignment_statement_list
28: executable_statement_list (RETURN) ->  assignment_statement_list RETURN ';'
29: executable_statement_list (GOTO) ->  assignment_statement_list GOTO '<' NAME INTEGER_NUMBER '>' ';'
30: executable_statement_list (';') ->  assignment_statement_list if_else_clause ';'
31: assignment_statement_list ->  <empty>
32: assignment_statement_list ->  assignment_statement_list assignment_statement
33: assignment_statement ('=') ->  variable '=' variable ';'
34: assignment_statement ('=') ->  variable '=' constant ';'
35: assignment_statement ('=') ->  variable '=' relop_expression ';'
36: variable (NAME) ->  NAME
37: constant (INTEGER_NUMBER) ->  INTEGER_NUMBER
38: program_$ ->  program


Symbolic Terminal tokens:
       error
       EOF
   257: IF
   258: GOTO
   259: ELSE
   260: INTEGER_NUMBER
   261: NAME
   262: RETURN
   263: INTEGER
    40: '('
    41: ')'
   123: '{'
   125: '}'
    59: ';'
    60: '<'
    62: '>'
    58: ':'
    61: '='
    33: '!'


Grammar States: 
State 0:
38: program_$ ->  . program 
  0:   On program to state 1
  1:   On declaration_statement_list to state 2
  2:   On procedure_name to state 3
  3:   On declaration_statement to state 4
  4:   On NAME to state 5
  5:   On INTEGER to state 6


State 1:
38: program_$ -> program  . 


State 2:
1: program -> declaration_statement_list  . procedure_name #0001 procedure_body 
10: declaration_statement_list -> declaration_statement_list  . declaration_statement 
  0:   On procedure_name to state 7
  1:   On declaration_statement to state 8
  2:   On NAME to state 5
  3:   On INTEGER to state 6


State 3:
3: program -> procedure_name  . #0002 procedure_body 
  0:   On #0002 to state 9
  Reduce by 4: #0002 ->  . 


State 4:
9: declaration_statement_list -> declaration_statement  . 
  Reduce by 9: declaration_statement_list -> declaration_statement  . 


State 5:
5: procedure_name -> NAME  . '(' ')' 
  0:   On '(' to state 10


State 6:
11: declaration_statement -> INTEGER  . NAME ';' 
  0:   On NAME to state 11


State 7:
1: program -> declaration_statement_list procedure_name  . #0001 procedure_body 
  0:   On #0001 to state 12
  Reduce by 2: #0001 ->  . 


State 8:
10: declaration_statement_list -> declaration_statement_list declaration_statement  . 
  Reduce by 10: declaration_statement_list -> declaration_statement_list declaration_statement  . 


State 9:
3: program -> procedure_name #0002  . procedure_body 
  0:   On procedure_body to state 13
  1:   On '{' to state 14


State 10:
5: procedure_name -> NAME '('  . ')' 
  0:   On ')' to state 15


State 11:
11: declaration_statement -> INTEGER NAME  . ';' 
  0:   On ';' to state 16


State 12:
1: program -> declaration_statement_list procedure_name #0001  . procedure_body 
  0:   On procedure_body to state 17
  1:   On '{' to state 14


State 13:
3: program -> procedure_name #0002 procedure_body  . 
  Reduce by 3: program -> procedure_name #0002 procedure_body  . 


State 14:
6: procedure_body -> '{'  . declaration_statement_list #0003 basic_block_list '}' 
8: procedure_body -> '{'  . basic_block_list '}' 
  0:   On declaration_statement_list to state 18
  1:   On basic_block_list to state 19
  2:   On declaration_statement to state 4
  3:   On basic_block to state 20
  4:   On INTEGER to state 6
  5:   On '<' to state 21


State 15:
5: procedure_name -> NAME '(' ')'  . 
  Reduce by 5: procedure_name -> NAME '(' ')'  . 


State 16:
11: declaration_statement -> INTEGER NAME ';'  . 
  Reduce by 11: declaration_statement -> INTEGER NAME ';'  . 


State 17:
1: program -> declaration_statement_list procedure_name #0001 procedure_body  . 
  Reduce by 1: program -> declaration_statement_list procedure_name #0001 procedure_body  . 


State 18:
6: procedure_body -> '{' declaration_statement_list  . #0003 basic_block_list '}' 
10: declaration_statement_list -> declaration_statement_list  . declaration_statement 
  0:   On #0003 to state 22
  1:   On declaration_statement to state 8
  2:   On INTEGER to state 6
  Reduce by 7: #0003 ->  . 


State 19:
8: procedure_body -> '{' basic_block_list  . '}' 
12: basic_block_list -> basic_block_list  . basic_block 
  0:   On '}' to state 23
  1:   On basic_block to state 24
  2:   On '<' to state 21


State 20:
13: basic_block_list -> basic_block  . 
  Reduce by 13: basic_block_list -> basic_block  . 


State 21:
14: basic_block -> '<'  . NAME INTEGER_NUMBER '>' ':' executable_statement_list 
  0:   On NAME to state 25


State 22:
6: procedure_body -> '{' declaration_statement_list #0003  . basic_block_list '}' 
  0:   On basic_block_list to state 26
  1:   On basic_block to state 20
  2:   On '<' to state 21


State 23:
8: procedure_body -> '{' basic_block_list '}'  . 
  Reduce by 8: procedure_body -> '{' basic_block_list '}'  . 


State 24:
12: basic_block_list -> basic_block_list basic_block  . 
  Reduce by 12: basic_block_list -> basic_block_list basic_block  . 


State 25:
14: basic_block -> '<' NAME  . INTEGER_NUMBER '>' ':' executable_statement_list 
  0:   On INTEGER_NUMBER to state 27


State 26:
6: procedure_body -> '{' declaration_statement_list #0003 basic_block_list  . '}' 
12: basic_block_list -> basic_block_list  . basic_block 
  0:   On '}' to state 28
  1:   On basic_block to state 24
  2:   On '<' to state 21


State 27:
14: basic_block -> '<' NAME INTEGER_NUMBER  . '>' ':' executable_statement_list 
  0:   On '>' to state 29


State 28:
6: procedure_body -> '{' declaration_statement_list #0003 basic_block_list '}'  . 
  Reduce by 6: procedure_body -> '{' declaration_statement_list #0003 basic_block_list '}'  . 


State 29:
14: basic_block -> '<' NAME INTEGER_NUMBER '>'  . ':' executable_statement_list 
  0:   On ':' to state 30


State 30:
14: basic_block -> '<' NAME INTEGER_NUMBER '>' ':'  . executable_statement_list 
  0:   On executable_statement_list to state 31
  1:   On assignment_statement_list to state 32
  Reduce by 31: assignment_statement_list ->  . 


State 31:
14: basic_block -> '<' NAME INTEGER_NUMBER '>' ':' executable_statement_list  . 
  Reduce by 14: basic_block -> '<' NAME INTEGER_NUMBER '>' ':' executable_statement_list  . 


State 32:
27: executable_statement_list -> assignment_statement_list  . 
28: executable_statement_list -> assignment_statement_list  . RETURN ';' 
29: executable_statement_list -> assignment_statement_list  . GOTO '<' NAME INTEGER_NUMBER '>' ';' 
30: executable_statement_list -> assignment_statement_list  . if_else_clause ';' 
32: assignment_statement_list -> assignment_statement_list  . assignment_statement 
  0:   On RETURN to state 33
  1:   On GOTO to state 34
  2:   On if_else_clause to state 35
  3:   On assignment_statement to state 36
  4:   On IF to state 37
  5:   On variable to state 38
  6:   On NAME to state 39
  Reduce by 27: executable_statement_list -> assignment_statement_list  . 


State 33:
28: executable_statement_list -> assignment_statement_list RETURN  . ';' 
  0:   On ';' to state 40


State 34:
29: executable_statement_list -> assignment_statement_list GOTO  . '<' NAME INTEGER_NUMBER '>' ';' 
  0:   On '<' to state 41


State 35:
30: executable_statement_list -> assignment_statement_list if_else_clause  . ';' 
  0:   On ';' to state 42


State 36:
32: assignment_statement_list -> assignment_statement_list assignment_statement  . 
  Reduce by 32: assignment_statement_list -> assignment_statement_list assignment_statement  . 


State 37:
15: if_else_clause -> IF  . '(' relop_expression ')' GOTO '<' NAME INTEGER_NUMBER '>' ';' ELSE GOTO '<' NAME INTEGER_NUMBER '>' 
  0:   On '(' to state 43


State 38:
33: assignment_statement -> variable  . '=' variable ';' 
34: assignment_statement -> variable  . '=' constant ';' 
35: assignment_statement -> variable  . '=' relop_expression ';' 
  0:   On '=' to state 44


State 39:
36: variable -> NAME  . 
  Reduce by 36: variable -> NAME  . 


State 40:
28: executable_statement_list -> assignment_statement_list RETURN ';'  . 
  Reduce by 28: executable_statement_list -> assignment_statement_list RETURN ';'  . 


State 41:
29: executable_statement_list -> assignment_statement_list GOTO '<'  . NAME INTEGER_NUMBER '>' ';' 
  0:   On NAME to state 45


State 42:
30: executable_statement_list -> assignment_statement_list if_else_clause ';'  . 
  Reduce by 30: executable_statement_list -> assignment_statement_list if_else_clause ';'  . 


State 43:
15: if_else_clause -> IF '('  . relop_expression ')' GOTO '<' NAME INTEGER_NUMBER '>' ';' ELSE GOTO '<' NAME INTEGER_NUMBER '>' 
  0:   On relop_expression to state 46
  1:   On variable to state 47
  2:   On constant to state 48
  3:   On NAME to state 39
  4:   On INTEGER_NUMBER to state 49


State 44:
33: assignment_statement -> variable '='  . variable ';' 
34: assignment_statement -> variable '='  . constant ';' 
35: assignment_statement -> variable '='  . relop_expression ';' 
  0:   On variable to state 50
  1:   On constant to state 51
  2:   On relop_expression to state 52
  3:   On NAME to state 39
  4:   On INTEGER_NUMBER to state 49


State 45:
29: executable_statement_list -> assignment_statement_list GOTO '<' NAME  . INTEGER_NUMBER '>' ';' 
  0:   On INTEGER_NUMBER to state 53


State 46:
15: if_else_clause -> IF '(' relop_expression  . ')' GOTO '<' NAME INTEGER_NUMBER '>' ';' ELSE GOTO '<' NAME INTEGER_NUMBER '>' 
19: relop_expression -> relop_expression  . relop variable 
20: relop_expression -> relop_expression  . relop constant 
  0:   On ')' to state 54
  1:   On relop to state 55
  2:   On '>' to state 56
  3:   On '<' to state 57
  4:   On '=' to state 58
  5:   On '!' to state 59


State 47:
16: relop_expression -> variable  . relop variable 
18: relop_expression -> variable  . relop constant 
  0:   On relop to state 60
  1:   On '>' to state 56
  2:   On '<' to state 57
  3:   On '=' to state 58
  4:   On '!' to state 59


State 48:
17: relop_expression -> constant  . relop variable 
  0:   On relop to state 61
  1:   On '>' to state 56
  2:   On '<' to state 57
  3:   On '=' to state 58
  4:   On '!' to state 59


State 49:
37: constant -> INTEGER_NUMBER  . 
  Reduce by 37: constant -> INTEGER_NUMBER  . 


State 50:
33: assignment_statement -> variable '=' variable  . ';' 
16: relop_expression -> variable  . relop variable 
18: relop_expression -> variable  . relop constant 
  0:   On ';' to state 62
  1:   On relop to state 60
  2:   On '>' to state 56
  3:   On '<' to state 57
  4:   On '=' to state 58
  5:   On '!' to state 59


State 51:
34: assignment_statement -> variable '=' constant  . ';' 
17: relop_expression -> constant  . relop variable 
  0:   On ';' to state 63
  1:   On relop to state 61
  2:   On '>' to state 56
  3:   On '<' to state 57
  4:   On '=' to state 58
  5:   On '!' to state 59


State 52:
35: assignment_statement -> variable '=' relop_expression  . ';' 
19: relop_expression -> relop_expression  . relop variable 
20: relop_expression -> relop_expression  . relop constant 
  0:   On ';' to state 64
  1:   On relop to state 55
  2:   On '>' to state 56
  3:   On '<' to state 57
  4:   On '=' to state 58
  5:   On '!' to state 59


State 53:
29: executable_statement_list -> assignment_statement_list GOTO '<' NAME INTEGER_NUMBER  . '>' ';' 
  0:   On '>' to state 65


State 54:
15: if_else_clause -> IF '(' relop_expression ')'  . GOTO '<' NAME INTEGER_NUMBER '>' ';' ELSE GOTO '<' NAME INTEGER_NUMBER '>' 
  0:   On GOTO to state 66


State 55:
19: relop_expression -> relop_expression relop  . variable 
20: relop_expression -> relop_expression relop  . constant 
  0:   On variable to state 67
  1:   On constant to state 68
  2:   On NAME to state 39
  3:   On INTEGER_NUMBER to state 49


State 56:
21: relop -> '>'  . '=' 
26: relop -> '>'  . 
  0:   On '=' to state 69
  Reduce by 26: relop -> '>'  . 


State 57:
22: relop -> '<'  . '=' 
25: relop -> '<'  . 
  0:   On '=' to state 70
  Reduce by 25: relop -> '<'  . 


State 58:
23: relop -> '='  . '=' 
  0:   On '=' to state 71


State 59:
24: relop -> '!'  . '=' 
  0:   On '=' to state 72


State 60:
16: relop_expression -> variable relop  . variable 
18: relop_expression -> variable relop  . constant 
  0:   On variable to state 73
  1:   On constant to state 74
  2:   On NAME to state 39
  3:   On INTEGER_NUMBER to state 49


State 61:
17: relop_expression -> constant relop  . variable 
  0:   On variable to state 75
  1:   On NAME to state 39


State 62:
33: assignment_statement -> variable '=' variable ';'  . 
  Reduce by 33: assignment_statement -> variable '=' variable ';'  . 


State 63:
34: assignment_statement -> variable '=' constant ';'  . 
  Reduce by 34: assignment_statement -> variable '=' constant ';'  . 


State 64:
35: assignment_statement -> variable '=' relop_expression ';'  . 
  Reduce by 35: assignment_statement -> variable '=' relop_expression ';'  . 


State 65:
29: executable_statement_list -> assignment_statement_list GOTO '<' NAME INTEGER_NUMBER '>'  . ';' 
  0:   On ';' to state 76


State 66:
15: if_else_clause -> IF '(' relop_expression ')' GOTO  . '<' NAME INTEGER_NUMBER '>' ';' ELSE GOTO '<' NAME INTEGER_NUMBER '>' 
  0:   On '<' to state 77


State 67:
19: relop_expression -> relop_expression relop variable  . 
  Reduce by 19: relop_expression -> relop_expression relop variable  . 


State 68:
20: relop_expression -> relop_expression relop constant  . 
  Reduce by 20: relop_expression -> relop_expression relop constant  . 


State 69:
21: relop -> '>' '='  . 
  Reduce by 21: relop -> '>' '='  . 


State 70:
22: relop -> '<' '='  . 
  Reduce by 22: relop -> '<' '='  . 


State 71:
23: relop -> '=' '='  . 
  Reduce by 23: relop -> '=' '='  . 


State 72:
24: relop -> '!' '='  . 
  Reduce by 24: relop -> '!' '='  . 


State 73:
16: relop_expression -> variable relop variable  . 
  Reduce by 16: relop_expression -> variable relop variable  . 


State 74:
18: relop_expression -> variable relop constant  . 
  Reduce by 18: relop_expression -> variable relop constant  . 


State 75:
17: relop_expression -> constant relop variable  . 
  Reduce by 17: relop_expression -> constant relop variable  . 


State 76:
29: executable_statement_list -> assignment_statement_list GOTO '<' NAME INTEGER_NUMBER '>' ';'  . 
  Reduce by 29: executable_statement_list -> assignment_statement_list GOTO '<' NAME INTEGER_NUMBER '>' ';'  . 


State 77:
15: if_else_clause -> IF '(' relop_expression ')' GOTO '<'  . NAME INTEGER_NUMBER '>' ';' ELSE GOTO '<' NAME INTEGER_NUMBER '>' 
  0:   On NAME to state 78


State 78:
15: if_else_clause -> IF '(' relop_expression ')' GOTO '<' NAME  . INTEGER_NUMBER '>' ';' ELSE GOTO '<' NAME INTEGER_NUMBER '>' 
  0:   On INTEGER_NUMBER to state 79


State 79:
15: if_else_clause -> IF '(' relop_expression ')' GOTO '<' NAME INTEGER_NUMBER  . '>' ';' ELSE GOTO '<' NAME INTEGER_NUMBER '>' 
  0:   On '>' to state 80


State 80:
15: if_else_clause -> IF '(' relop_expression ')' GOTO '<' NAME INTEGER_NUMBER '>'  . ';' ELSE GOTO '<' NAME INTEGER_NUMBER '>' 
  0:   On ';' to state 81


State 81:
15: if_else_clause -> IF '(' relop_expression ')' GOTO '<' NAME INTEGER_NUMBER '>' ';'  . ELSE GOTO '<' NAME INTEGER_NUMBER '>' 
  0:   On ELSE to state 82


State 82:
15: if_else_clause -> IF '(' relop_expression ')' GOTO '<' NAME INTEGER_NUMBER '>' ';' ELSE  . GOTO '<' NAME INTEGER_NUMBER '>' 
  0:   On GOTO to state 83


State 83:
15: if_else_clause -> IF '(' relop_expression ')' GOTO '<' NAME INTEGER_NUMBER '>' ';' ELSE GOTO  . '<' NAME INTEGER_NUMBER '>' 
  0:   On '<' to state 84


State 84:
15: if_else_clause -> IF '(' relop_expression ')' GOTO '<' NAME INTEGER_NUMBER '>' ';' ELSE GOTO '<'  . NAME INTEGER_NUMBER '>' 
  0:   On NAME to state 85


State 85:
15: if_else_clause -> IF '(' relop_expression ')' GOTO '<' NAME INTEGER_NUMBER '>' ';' ELSE GOTO '<' NAME  . INTEGER_NUMBER '>' 
  0:   On INTEGER_NUMBER to state 86


State 86:
15: if_else_clause -> IF '(' relop_expression ')' GOTO '<' NAME INTEGER_NUMBER '>' ';' ELSE GOTO '<' NAME INTEGER_NUMBER  . '>' 
  0:   On '>' to state 87


State 87:
15: if_else_clause -> IF '(' relop_expression ')' GOTO '<' NAME INTEGER_NUMBER '>' ';' ELSE GOTO '<' NAME INTEGER_NUMBER '>'  . 
  Reduce by 15: if_else_clause -> IF '(' relop_expression ')' GOTO '<' NAME INTEGER_NUMBER '>' ';' ELSE GOTO '<' NAME INTEGER_NUMBER '>'  . 



